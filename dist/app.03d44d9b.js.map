{"version":3,"sources":["app.js"],"names":["loc","document","querySelector","degrees","description","icon","apikey","changeToF","celsius","metsecToMilesHour","metsec","result","round","Math","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","newUrl","url","fetch","then","response","json","console","log","textContent","current","temp","mapDescription","descriptionString","weather","replace","toUpperCase","iconCode","iconUrl","src","addEventListener","floor","wind","humidity","uvindex","uvi","includes","style","color","i","month","getElementById","day","iconForecast","min","max","datetime","Date","daily","dt","iconCodeForecast","iconUrlForecast","monthArr","getMonth","getDate","data","name"],"mappings":";AAAA,IAAMA,EAAMC,SAASC,cAAc,aAC7BC,EAAUF,SAASC,cAAc,YACjCE,EAAcH,SAASC,cAAc,gBACrCG,EAAOJ,SAASC,cAAc,iBAC9BI,EAAN,mCAGMC,EAAY,SAACC,GACRA,OAAW,IAAXA,EAAiB,IAEtBC,EAAoB,SAACC,GACjBC,IAAAA,EAAkB,WAATD,EAERE,OADQC,KAAKD,MAAe,IAATD,GAAe,KAIzCG,UAAUC,aACVD,UAAUC,YAAYC,mBAAmB,SAACC,GACPA,IAAAA,EAAAA,EAASC,OAAjCC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UACZC,EAAiEF,wDAAAA,OAAAA,EAAgBC,SAAAA,OAAAA,EAAwDd,gDAAAA,OAAAA,EAA/I,KACMgB,EAA6DH,uDAAAA,OAAAA,EAAgBC,SAAAA,OAAAA,EAAkCd,0BAAAA,OAAAA,GACrHiB,MAAMF,GAAQG,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAAQF,KAAK,SAAAC,GACjDE,QAAQC,IAAIH,GACZtB,EAAQ0B,YAAcJ,EAASK,QAAQC,KACjCC,IAAkBC,EAIxB7B,EAAYyB,aAJYI,EAIiBR,EAASK,QAAQI,QAAQ,GAAzB,aAHJC,QAAQF,EAAkB,GAAIA,EAAkB,GAAGG,eAKlFC,IAAAA,EAAWZ,EAASK,QAAQI,QAAQ,GAAzB,KACXI,EAA+CD,qCAAAA,OAAAA,EAArD,WACAhC,EAAKkC,IAAMD,EAGErC,SAASC,cAAc,SAC/BsC,iBAAiB,QAAS,WACiC,QAAxDvC,SAASC,cAAc,iBAAiB2B,aAC3C5B,SAASC,cAAc,iBAAiB2B,YAAc,MACtD1B,EAAQ0B,YAAchB,KAAK4B,MAAMlC,EAAUkB,EAASK,QAAQC,SAE5D9B,SAASC,cAAc,iBAAiB2B,YAAc,MACtD1B,EAAQ0B,YAAcJ,EAASK,QAAQC,QAKtCW,IAAAA,EAAOzC,SAASC,cAAc,eAC9ByC,EAAW1C,SAASC,cAAc,aAClC0C,EAAU3C,SAASC,cAAc,aACvCwC,EAAKb,YAAiBJ,GAAAA,OAAAA,EAASK,QAAT,WAAtB,QACAa,EAASd,YAAiBJ,GAAAA,OAAAA,EAASK,QAAQa,SAA3C,MACAC,EAAQf,YAAiBJ,GAAAA,OAAAA,EAASK,QAAQe,KAG1CH,EAAKF,iBAAiB,QAAS,WACvBE,EAAKb,YAAYiB,SAAS,SAC1BJ,EAAKb,YAAiBpB,GAAAA,OAAAA,EAAkBgB,EAASK,QAAT,YAAxC,eAEHY,EAAKb,YAAiBJ,GAAAA,OAAAA,EAASK,QAAT,WAAtB,UAKDc,EAAQf,YAAc,EACtBe,EAAQG,MAAMC,MAAQ,QACfJ,EAAQf,YAAc,EAC7Be,EAAQG,MAAMC,MAAQ,SACfJ,EAAQf,YAAc,EAC7Be,EAAQG,MAAMC,MAAQ,SACfJ,EAAQf,YAAc,GAC7Be,EAAQG,MAAMC,MAAQ,MAEtBJ,EAAQG,MAAMC,MAAQ,UAGrB,IAAIC,IAAAA,EAAAA,SAAAA,GAECC,IAAAA,EAAQjD,SAASkD,eAAuBF,QAAAA,OAAAA,IACxCG,EAAMnD,SAASkD,eAAqBF,MAAAA,OAAAA,IACpCI,EAAepD,SAASkD,eAA+BF,gBAAAA,OAAAA,IACvDK,EAAMrD,SAASkD,eAAqBF,MAAAA,OAAAA,IACpCM,EAAMtD,SAASkD,eAAqBF,MAAAA,OAAAA,IAEpCO,EAAW,IAAIC,KAA4B,IAAvBhC,EAASiC,MAAMT,GAAGU,IACtCC,EAAmBnC,EAASiC,MAAMT,GAAGf,QAAQ,GAAG7B,KAChDwD,EAAuDD,qCAAAA,OAAAA,EAA7D,WACAP,EAAad,IAAMsB,EAEnBX,EAAMrB,YAAiBiC,GAAAA,OADN,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAChGN,EAASO,YAAzC,KACAX,EAAIvB,YAAiB2B,GAAAA,OAAAA,EAASQ,WAC9BV,EAAIzB,YAAiBJ,GAAAA,OAAAA,EAASiC,MAAMT,GAAGlB,KAAKuB,IAA5C,OACAC,EAAI1B,YAAiBJ,GAAAA,OAAAA,EAASiC,MAAMT,GAAGlB,KAAKwB,IAvEa,OA0EzDD,EAAId,iBAAiB,QAAS,WACtBc,EAAIzB,YAAYiB,SAAS,KAC7BQ,EAAIzB,YAAiBtB,GAAAA,OAAAA,EAAUM,KAAK4B,MAAMhB,EAASiC,MAAMT,GAAGlB,KAAKuB,MAAjE,OAEIA,EAAIzB,YAAiBJ,GAAAA,OAAAA,EAASiC,MAAMT,GAAGlB,KAAKuB,IAA5C,SAGRC,EAAIf,iBAAiB,QAAS,WACtBe,EAAI1B,YAAYiB,SAAS,KAC7BS,EAAI1B,YAAiBtB,GAAAA,OAAAA,EAAUM,KAAK4B,MAAMhB,EAASiC,MAAMT,GAAGlB,KAAKwB,MAAjE,OAEIA,EAAI1B,YAAiBJ,GAAAA,OAAAA,EAASiC,MAAMT,GAAGlB,KAAKwB,IAA5C,UA9BHN,EAAI,EAAGA,EAAI,EAAGA,IAAdA,EAAAA,KAqChB1B,MAAMD,GAAKE,KAAK,SAAAyC,GAAQA,OAAAA,EAAKvC,SAAQF,KAAK,SAAAyC,GACtCjE,EAAI6B,YAAcoC,EAAKC","file":"app.03d44d9b.js","sourceRoot":"..\\src","sourcesContent":["const loc = document.querySelector(\".location\");\r\nconst degrees = document.querySelector(\".degrees\");\r\nconst description = document.querySelector(\".description\");\r\nconst icon = document.querySelector(\".weather-icon\");\r\nconst apikey = process.env.NODE_ENV_API\r\n\r\n// Functions\r\nconst changeToF = (celsius) => {\r\n    return celsius * (9/5) +32\r\n}\r\nconst metsecToMilesHour = (metsec) => {\r\n    const result = metsec * 2.23693629;\r\n    const round = (Math.round(result * 100))/100\r\n    return round\r\n}\r\n\r\nif (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n       const { latitude, longitude } = position.coords;\r\n       const newUrl = ` https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=minutely,hourly&units=metric&appid=${apikey} `\r\n       const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=imperial&appid=${apikey}`;\r\n       fetch(newUrl).then(response => response.json()).then(response => {\r\n           console.log(response);\r\n           degrees.textContent = response.current.temp;\r\n           const mapDescription = (descriptionString) => {\r\n            const newString = descriptionString.replace(descriptionString[0], descriptionString[0].toUpperCase());\r\n            return newString\r\n           }\r\n           description.textContent = mapDescription(response.current.weather[0][\"description\"]);\r\n           // Change icon\r\n           const iconCode = response.current.weather[0][\"icon\"];\r\n           const iconUrl = `https://openweathermap.org/img/wn/${iconCode}@2x.png`;\r\n           icon.src = iconUrl;\r\n\r\n           // Change temp to ºF if clicked\r\n           const temp = document.querySelector(\".temp\");\r\n           temp.addEventListener(\"click\", function() {\r\n               if (document.querySelector(\".degrees-type\").textContent === \" ºC\") {\r\n                document.querySelector(\".degrees-type\").textContent = \" ºF\"\r\n                degrees.textContent = Math.floor(changeToF(response.current.temp));\r\n               } else {\r\n                document.querySelector(\".degrees-type\").textContent = \" ºC\";\r\n                degrees.textContent = response.current.temp;\r\n               }\r\n           })\r\n\r\n           // Get the extra info for the cards and forecast\r\n           const wind = document.querySelector(\".wind-speed\");\r\n           const humidity = document.querySelector(\".humidity\");\r\n           const uvindex = document.querySelector(\".uv-index\");\r\n           wind.textContent = `${response.current[\"wind_speed\"]} m/s`;\r\n           humidity.textContent = `${response.current.humidity} %`;\r\n           uvindex.textContent = `${response.current.uvi}`;\r\n\r\n           // Change wind speed to miles/hour if clicked (and vice versa)\r\n           wind.addEventListener(\"click\", function() {\r\n               if (wind.textContent.includes(\"meter\")) {\r\n                   wind.textContent = `${metsecToMilesHour(response.current[\"wind_speed\"])} miles/hour`\r\n               } else {\r\n                wind.textContent = `${response.current[\"wind_speed\"]} m/s`;\r\n               }\r\n           })\r\n\r\n           // Change the color of uvindex based in its data\r\n           if (uvindex.textContent < 2){\r\n               uvindex.style.color = \"green\";\r\n           } else if (uvindex.textContent < 5) {\r\n               uvindex.style.color = \"yellow\";\r\n           } else if (uvindex.textContent < 7) {\r\n               uvindex.style.color = \"orange\";\r\n           } else if (uvindex.textContent < 10) {\r\n               uvindex.style.color = \"red\";\r\n           } else {\r\n               uvindex.style.color = \"#800080\";\r\n           }\r\n           // Forecast for the next 7 days\r\n           for (let i = 1; i < 7; i++) {\r\n               //HTML Elements\r\n               const month = document.getElementById(`month${i}`);\r\n               const day = document.getElementById(`day${i}`);\r\n               const iconForecast = document.getElementById(`forecast-icon${i}`);\r\n               const min = document.getElementById(`min${i}`);\r\n               const max = document.getElementById(`max${i}`);\r\n               \r\n               const datetime = new Date(response.daily[i].dt * 1000);\r\n               const iconCodeForecast = response.daily[i].weather[0].icon;\r\n               const iconUrlForecast = `https://openweathermap.org/img/wn/${iconCodeForecast}@2x.png`;\r\n               iconForecast.src = iconUrlForecast;\r\n               const monthArr = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n               month.textContent = `${monthArr[datetime.getMonth()]} `;\r\n               day.textContent = `${datetime.getDate()}`;\r\n               min.textContent = `${response.daily[i].temp.min} ºC`;\r\n               max.textContent = `${response.daily[i].temp.max} ºC`;\r\n\r\n               // Event listeners to change between Celsius - Fahrenheit\r\n               min.addEventListener(\"click\", function() {\r\n                   if (min.textContent.includes(\"C\")) {\r\n                   min.textContent = `${changeToF(Math.floor(response.daily[i].temp.min))} ºF`\r\n                   } else {\r\n                       min.textContent = `${response.daily[i].temp.min} ºC`;\r\n                   }\r\n               })\r\n               max.addEventListener(\"click\", function() {\r\n                   if (max.textContent.includes(\"C\")) {\r\n                   max.textContent = `${changeToF(Math.floor(response.daily[i].temp.max))} ºF`\r\n                   } else {\r\n                       max.textContent = `${response.daily[i].temp.max} ºC`;\r\n                   }\r\n               })\r\n\r\n               \r\n           }\r\n    });\r\n    fetch(url).then(data => data.json()).then(data => {\r\n        loc.textContent = data.name;\r\n    })\r\n    })\r\n};"]}